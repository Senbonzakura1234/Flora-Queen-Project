@using Flora_Queen_Project.Models
@model LoginViewModel
@{
    ViewBag.Title = "Log in";
    ViewBag.ContentTitle = "Hello! let's get started";
    Layout = "~/Views/Shared/_AuthenicationLayout.cshtml";
}

<div class="col-lg-4 mx-auto">
    <div class="auth-form-light text-left p-5">
        <div class="brand-logo">
            <img src="https://res.cloudinary.com/senbonzakura/image/upload/v1573316040/images/logo_fyzuba.svg" alt="logo">
        </div>
        <h4>@ViewBag.ContentTitle</h4>
        <h6 class="font-weight-light @ViewBag.LoginFail">@ViewBag.ContentSubTitle</h6>
        <form class="pt-3" action="@Url.Action("Login", "Account", new {ViewBag.ReturnUrl})" role="form" method="post" name="LoginForm" id="LoginForm">
            @Html.AntiForgeryToken()
            @Html.ValidationSummary("", new { @class = "text-danger" })
            <div class="form-group">
                @Html.TextBoxFor(m => m.Email, new { @class = "form-control", placeholder = "Email", spellcheck = "false" })
                <span class="iconWrap d-none d-sm-block">
                    <i class="icon mdi " id="EmailIcon"></i>
                </span>
            </div>
            <div class="form-group" id="passwordField">
                <div class="input-group">
                    <div class="input-group-prepend" title="show password">
                        <span class="input-group-text bg-gradient-primary text-white">
                            <i class="mdi mdi-eye"></i>
                        </span>
                    </div>
                    @Html.PasswordFor(m => m.Password, new { @class = "form-control", placeholder = "Password", autocomplete = "new-password" })
                    <span class="iconWrap d-none d-sm-block">
                        <i class="icon mdi " id="PasswordIcon"></i>
                    </span>
                </div>
            </div>
            <div class="mt-3">
                <input class="btn btn-block btn-gradient-primary btn-lg font-weight-medium auth-form-btn" type="submit" value="Login" />
            </div>
            <div class="my-2 d-flex justify-content-between align-items-center">
                <div class="form-check">
                    <label class="form-check-label text-muted">
                        <input type="checkbox" class="form-check-input" name="keepSignInCheck" id="keepSignIn"> Keep me signed in
                    </label>
                </div>
                <a href="#" class="text-small text-primary">Forgot password?</a>
                @*Enable this once you have account confirmation enabled for password reset functionality
            <p>
                @Html.ActionLink("Forgot your password?", "ForgotPassword")
            </p>*@
            </div>
        </form>
        <div class="mb-2">
            @Html.Partial("_ExternalLoginsListPartial", new ExternalLoginListViewModel { ReturnUrl = ViewBag.ReturnUrl })
        </div>
        <div class="text-center mt-4 text-small">
            Don't have an account? <a href="@Url.Action("Register")">Create</a>
        </div>
    </div>
</div>

<style type="text/css">
    .form-group {
        position: relative;
    }

    .iconWrap {
        position: absolute;
        top: 14px;
        right: 20px;
    }
</style>

@section scripts{
    @Scripts.Render("~/bundles/jqueryval")


    <script type="text/javascript">
        jQuery.validator.setDefaults({
            debug: false,
            ignore: [],
            errorClass: "error text-small text-danger border-danger",
            validClass: "text-small text-primary border-primary",
            errorElement: 'span',
            success: "valid"
        });
        const inputChange = $("input.form-control");
        inputChange.on('input',
            function() {
                const idChange = $(this).attr("id");
                const targetChange = $(`#${idChange}Icon`);
                console.log($(this).valid());
                if ($(this).valid()) {
                    targetChange.addClass("mdi-check-circle");
                    targetChange.addClass("text-primary");
                    targetChange.removeClass("mdi-close-circle");
                    targetChange.removeClass("text-danger");
                } else {
                    targetChange.removeClass("mdi-check-circle");
                    targetChange.removeClass("text-primary");
                    targetChange.addClass("mdi-close-circle");
                    targetChange.addClass("text-danger");
                }
            });
        $("#LoginForm").validate({
            // ReSharper disable UnusedParameter
            invalidHandler: function(event, validator) {
                // ReSharper restore UnusedParameter
                const input = $("input.form-control");
                input.each(function () {
                    console.log($(this).valid());
                    const id = $(this).attr("id");
                    const target = $(`#${id}Icon`);
                    if ($(this).valid()) {
                        target.addClass("mdi-check-circle");
                        target.addClass("text-primary");
                        target.removeClass("mdi-close-circle");
                        target.removeClass("text-danger");
                    } else {
                        target.removeClass("mdi-check-circle");
                        target.removeClass("text-primary");
                        target.addClass("mdi-close-circle");
                        target.addClass("text-danger");
                    }
                });
            },
            rules: {
                Email: {
                    required: true,
                    email: true
                },
                Password: {
                    required: true
                }
            },
            messages: {
                Email: {
                    required: "* Email is required *",
                    email: "* Invalid Email *"
                },
                Password: {
                    required: "* Password is required *"
                }
            },
            errorPlacement: function(error, element) {
                if((element.attr('name') === 'Password')){
                    error.appendTo("div#passwordField");  
                }
                else{
                    element.after(error);
                }
            }
        });
    </script>
}